<?xml version="1.0" encoding="UTF-8"?>
<!--设置log4j2的自身log级别为warn-->
<!--日志级别以及优先级排序: OFF > FATAL > ERROR > WARN > INFO > DEBUG > TRACE > ALL -->
<!--Configuration后面的status，这个用于设置log4j2自身内部的信息输出，可以不设置，
    当设置成trace时，你会看到log4j2内部各种详细输出-->
<!--monitorInterval：Log4j能够自动检测修改配置 文件和重新配置本身，设置间隔秒数-->
<configuration status="WARN" monitorInterval="30">
    <!-- 定义全局变量 日志文件目录  压缩文件目录 日志格式配置-->
    <properties>
        <Property name = "LOG_FILE_PATH">./logs</Property>
        <Property name = "FILE_GZ">./logs/gz</Property>
        <Property name = "LOG_PATTERN">[%d{yyyy-MM-dd HH:mm:ss.SSS}] %-5level %class{36} %L %M - %msg%xEx%n</Property>
    </properties>

    <appenders>
        <!-- 输出控制台日志的配置 -->
        <Console name="Console" target="SYSTEM_OUT" >
            <!--控制台只输出INFO及以上级别的信息（onMatch），其他的直接拒绝（onMismatch）-->
            <ThresholdFilter level="INFO" onMatch="ACCEPT" onMismatch="DENY" />
            <!-- 输出日志的格式  时间 日志级别 类路径 行号 方法名 - 信息 -->
            <PatternLayout pattern="${LOG_PATTERN}" />
        </Console>

        <!--INFO及以上级别的信息 记录到console.log，日志放到logs/console/console.log文件中-->
        <!--打印出DEBUG级别日志，每次大小超过size，则这size大小的日志会自动存入按年份-月份建立的文件夹下面并进行压缩，作为存档-->
        <RollingFile name="ConsoleApplication" fileName="${LOG_FILE_PATH}/console/console.log"
                     filePattern="${LOG_FILE_PATH}/console/$${date:yyyy-MM}/console-%d{yyyy-MM-dd}-%i.log.gz">

            <!-- 记录所有级别信息 -->
            <ThresholdFilter level="INFO" onMatch="ACCEPT" onMismatch="DENY"/>

            <!-- 输出日志的格式  时间 日志级别 类路径 行号 方法名 - 信息 -->
            <PatternLayout pattern="${LOG_PATTERN}" />
            <Policies>
                <!-- 此处为每个文件大小策略限制，使用它一般会在文件中filePattern采用%i模式 -->
                <SizeBasedTriggeringPolicy size="50 MB"/>
                <!-- TimeBasedTriggeringPolicy需要和filePattern配套使用，由于filePattern配置的时间最小粒度是dd天，所以表示每一天新建一个文件保存日志。SizeBasedTriggeringPolicy表示当文件大小大于指定size时，生成新的文件保存日志 -->
                <TimeBasedTriggeringPolicy modulate="true" interval="1" />
            </Policies>
            <!-- 指定每天的最大压缩包个数，默认7个，超过了会覆盖之前的 -->
            <DefaultRolloverStrategy max="30"></DefaultRolloverStrategy>
        </RollingFile>

        <!--处理DEBUG级别的日志，并把该日志放到logs/debug/debug.log文件中-->
        <!--打印出DEBUG级别日志，每次大小超过size，则这size大小的日志会自动存入按年份-月份建立的文件夹下面并进行压缩，作为存档-->
        <RollingFile name="RollingFileDebug" fileName="${LOG_FILE_PATH}/debug/debug.log"
                     filePattern="${LOG_FILE_PATH}/debug/$${date:yyyy-MM}/debug-%d{yyyy-MM-dd}-%i.log.gz">
            <Filters>
                <!-- 只记录INFO和DEBUG级别信息 -->
                <ThresholdFilter level="DEBUG"/>
                <ThresholdFilter level="INFO" onMatch="DENY" onMismatch="NEUTRAL"/>
            </Filters>
            <!-- 输出日志的格式  时间 日志级别 类路径 行号 方法名 - 信息 -->
            <PatternLayout pattern="${LOG_PATTERN}" />
            <Policies>
                <!-- 此处为每个文件大小策略限制，使用它一般会在文件中filePattern采用%i模式 -->
                <SizeBasedTriggeringPolicy size="50 MB"/>
                <!-- TimeBasedTriggeringPolicy需要和filePattern配套使用，由于filePattern配置的时间最小粒度是dd天，所以表示每一天新建一个文件保存日志。SizeBasedTriggeringPolicy表示当文件大小大于指定size时，生成新的文件保存日志 -->
                <TimeBasedTriggeringPolicy modulate="true" interval="1" />
            </Policies>
            <!-- 指定每天的最大压缩包个数，默认7个，超过了会覆盖之前的 -->
            <DefaultRolloverStrategy max="30"></DefaultRolloverStrategy>
        </RollingFile>

        <!--处理INFO级别的日志，并把该日志放到logs/info/info.log文件中-->
        <RollingFile name="RollingFileInfo" fileName="${LOG_FILE_PATH}/info/info.log"
                     filePattern="${LOG_FILE_PATH}/info/$${date:yyyy-MM}/info-%d{yyyy-MM-dd}-%i.log.gz">
            <Filters>
                <!--只接受INFO级别的日志，其余的全部拒绝处理-->
                <ThresholdFilter level="INFO"/>
                <ThresholdFilter level="WARN" onMatch="DENY" onMismatch="NEUTRAL"/>
            </Filters>
            <PatternLayout pattern="${LOG_PATTERN}" />
            <Policies>
                <!-- 此处为每个文件大小策略限制，使用它一般会在文件中filePattern采用%i模式 -->
                <SizeBasedTriggeringPolicy size="50 MB"/>
                <!-- TimeBasedTriggeringPolicy需要和filePattern配套使用，由于filePattern配置的时间最小粒度是dd天，所以表示每一天新建一个文件保存日志。SizeBasedTriggeringPolicy表示当文件大小大于指定size时，生成新的文件保存日志 -->
                <TimeBasedTriggeringPolicy modulate="true" interval="1" />
            </Policies>
            <!-- 指定每天的最大压缩包个数，默认7个，超过了会覆盖之前的 -->
            <DefaultRolloverStrategy max="30"></DefaultRolloverStrategy>
        </RollingFile>

        <!--处理WARN级别的日志，并把该日志放到logs/warn/warn.log文件中-->
        <RollingFile name="RollingFileWarn" fileName="${LOG_FILE_PATH}/warn/warn.log"
                     filePattern="${LOG_FILE_PATH}/warn/$${date:yyyy-MM}/warn-%d{yyyy-MM-dd}-%i.log.gz">
            <Filters>
                <ThresholdFilter level="WARN"/>
                <ThresholdFilter level="ERROR" onMatch="DENY" onMismatch="NEUTRAL"/>
            </Filters>
            <PatternLayout pattern="${LOG_PATTERN}" />
            <Policies>
                <!-- 此处为每个文件大小策略限制，使用它一般会在文件中filePattern采用%i模式 -->
                <SizeBasedTriggeringPolicy size="50 MB"/>
                <!-- TimeBasedTriggeringPolicy需要和filePattern配套使用，由于filePattern配置的时间最小粒度是dd天，所以表示每一天新建一个文件保存日志。SizeBasedTriggeringPolicy表示当文件大小大于指定size时，生成新的文件保存日志 -->
                <TimeBasedTriggeringPolicy modulate="true" interval="1" />
            </Policies>
            <!-- 指定每天的最大压缩包个数，默认7个，超过了会覆盖之前的 -->
            <DefaultRolloverStrategy max="30"></DefaultRolloverStrategy>
        </RollingFile>

        <!--处理error级别的日志，并把该日志放到logs/error/error.log文件中-->
        <RollingFile name="RollingFileError" fileName="${LOG_FILE_PATH}/error/error.log"
                     filePattern="${LOG_FILE_PATH}/error/$${date:yyyy-MM}/error-%d{yyyy-MM-dd}-%i.log.gz">
            <ThresholdFilter level="ERROR"/>
            <PatternLayout
                    pattern="${LOG_PATTERN}"/>
            <Policies>
                <!-- 此处为每个文件大小策略限制，使用它一般会在文件中filePattern采用%i模式 -->
                <SizeBasedTriggeringPolicy size="50 MB"/>
                <!-- TimeBasedTriggeringPolicy需要和filePattern配套使用，由于filePattern配置的时间最小粒度是dd天，所以表示每一天新建一个文件保存日志。SizeBasedTriggeringPolicy表示当文件大小大于指定size时，生成新的文件保存日志 -->
                <TimeBasedTriggeringPolicy modulate="true" interval="1" />
            </Policies>
            <!-- 指定每天的最大压缩包个数，默认7个，超过了会覆盖之前的 -->
            <DefaultRolloverStrategy max="30"></DefaultRolloverStrategy>
        </RollingFile>

        <!--druid的日志记录追加器-->
        <RollingFile name="druidSqlRollingFile" fileName="${LOG_FILE_PATH}/druid-sql/druid-sql.log"
                     filePattern="${LOG_FILE_PATH}/druid-sql/$${date:yyyy-MM}/druid-sql-%d{yyyy-MM-dd}-%i.log.gz">
            <PatternLayout pattern="${LOG_PATTERN}"/>
            <Policies>
                <!-- 此处为每个文件大小策略限制，使用它一般会在文件中filePattern采用%i模式 -->
                <SizeBasedTriggeringPolicy size="50 MB"/>
                  <!-- TimeBasedTriggeringPolicy需要和filePattern配套使用，由于filePattern配置的时间最小粒度是dd天，所以表示每一天新建一个文件保存日志。SizeBasedTriggeringPolicy表示当文件大小大于指定size时，生成新的文件保存日志 -->
                 <TimeBasedTriggeringPolicy modulate="true" interval="1" />
        </Policies>
        <!-- 指定每天的最大压缩包个数，默认7个，超过了会覆盖之前的 -->
            <DefaultRolloverStrategy max="30"></DefaultRolloverStrategy>
        </RollingFile>

    </appenders>

    <loggers>
        <root level="DEBUG" includeLocation="true">
            <appender-ref ref="Console"/>
            <appender-ref ref="RollingFileInfo"/>
            <appender-ref ref="RollingFileWarn"/>
            <appender-ref ref="RollingFileError"/>
            <appender-ref ref="RollingFileDebug"/>
            <AppenderRef ref="ConsoleApplication"/>
        </root>


        <!--记录druid-sql的记录-->
        <logger name="druid.sql.Statement" level="debug" additivity="false">
            <appender-ref ref="druidSqlRollingFile"/>
        </logger>
        <logger name="druid.sql.Statement" level="debug" additivity="false">
            <appender-ref ref="druidSqlRollingFile"/>
        </logger>

        <!--log4j2 自带过滤日志-->
        <Logger name="org.apache.catalina.startup.DigesterFactory" level="error" />
        <Logger name="org.apache.catalina.util.LifecycleBase" level="error" />
        <Logger name="org.apache.coyote.http11.Http11NioProtocol" level="warn" />
        <logger name="org.apache.sshd.common.util.SecurityUtils" level="warn"/>
        <Logger name="org.apache.tomcat.util.net.NioSelectorPool" level="warn" />
        <Logger name="org.crsh.plugin" level="warn" />
        <logger name="org.crsh.ssh" level="warn"/>
        <Logger name="org.eclipse.jetty.util.component.AbstractLifeCycle" level="error" />
        <Logger name="org.hibernate.validator.internal.util.Version" level="warn" />
        <logger name="org.hibernate.SQL" level="DEBUG"/>
        <Logger name="org.hibernate.type.descriptor.sql" level="trace"
                additivity="false">
            <AppenderRef ref="Console" />
        </Logger>
        <logger name="org.springframework.boot.actuate.autoconfigure.CrshAutoConfiguration" level="warn"/>
        <logger name="org.springframework.boot.actuate.endpoint.jmx" level="warn"/>
        <logger name="org.thymeleaf" level="warn"/>

        <!-- jdbc -->
        <logger name="jdbc.sqlonly" level="WARN"/>
        <logger name="jdbc.sqltiming" level="INFO"/>
        <logger name="jdbc.resultsettable" level="INFO"/>
        <logger name="jdbc.resultset" level="WARN"/>
        <logger name="jdbc.connection" level="WARN"/>
        <logger name="jdbc.audit" level="WARN"/>

        <!-- 根据需要关闭不必要的日志输出 -->
        <logger name="jdbc.connection" level="OFF" />
        <logger name="jdbc.audit" level="OFF" />
        <logger name="jdbc.resultset" level="OFF" />
        <logger name="jdbc.sqlonly" level="OFF" />
        <logger name="jdbc.sqltiming" level="INFO" />
        <logger name="jdbc.resultsettable" level="INFO"/>
    </loggers>
</configuration>